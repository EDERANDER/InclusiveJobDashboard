import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix

# Configuraci√≥n de la p√°gina de Streamlit
# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Inclusi√≥n Laboral Dashboard", layout="wide", page_icon="üåê")

# CSS para la animaci√≥n
st.markdown("""
<style>
    @keyframes titleAnimation {
        0% { transform: translateX(-100%); opacity: 0; }
        50% { transform: translateX(0); opacity: 1; }
        100% { transform: translateX(0); opacity: 1; }
    }

    @keyframes rainbow {
        0% { color: #ff0000; }
        20% { color: #ffa500; }
        40% { color: #ffff00; }
        60% { color: #008000; }
        80% { color: #0000ff; }
        100% { color: #ff0000; }
    }

    .animated-title {
        font-size: 3em;
        font-weight: bold;
        text-align: center;
        animation: titleAnimation 2s ease-out, rainbow 5s infinite;
        padding: 20px;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo animado
st.markdown('<h1 class="animated-title">üåê Dashboard de Inclusi√≥n Laboral üåê</h1>', unsafe_allow_html=True)

# Cargar los datos autom√°ticamente con st.cache_data
@st.cache_data
def load_data():
    return pd.read_csv('1_vacantes_limpio.csv')

df = load_data()

# Men√∫ de navegaci√≥n
st.sidebar.title("üîç Explora el Dashboard")
menu = st.sidebar.radio("üìä Secciones:", ["üè† Bienvenido", "üìä An√°lisis de Datos", "ü§ñ Predicciones ML"])

# --- SECCI√ìN 1: Bienvenido ---
if menu == "üè† Bienvenido":
    st.title("üåê Dashboard de Inclusi√≥n Laboral para Personas con Discapacidad üåê")
    st.write(
        """
        üíº En el contexto laboral actual, las oportunidades para personas con discapacidad son limitadas.
        Este proyecto busca analizar la inclusi√≥n laboral mediante un an√°lisis de sectores y otros factores clave.
        
        üéØ **Objetivo**: Proveer una visi√≥n clara del estado de la inclusi√≥n laboral y utilizar Machine Learning para predecir patrones en vacantes inclusivas.
        
        """
    )
    
    # Imagen representativa centrada
    image = Image.open("img/inclusion.jpeg")  # Aseg√∫rate de tener esta imagen en tu directorio
    st.image(image, caption="Inclusi√≥n laboral para todos:(https://www.cepal.org/sites/default/files/styles/1920x1080/public/images/featured/inclusion-social.jpg?itok=E6Dj-ehF)", use_column_width=True)

    st.subheader("Preguntas Clave")
    st.write(
        """
        - ¬øCu√°les son los sectores con m√°s oportunidades inclusivas?
        - ¬øQu√© regiones ofrecen m√°s vacantes para personas con discapacidad?
        - ¬øQu√© requisitos de experiencia y competencias se solicitan m√°s?
        """
    )

    # st.subheader("Equipo de Desarrollo")
    # col1, col2, col3 = st.columns(3)
    # with col1:
    #     st.image("https://randomuser.me/api/portraits/men/1.jpg", width=100)  
    #     st.write("**√Ångel**\nRol: Data Scientist")
    # with col2:
    #     st.image("https://randomuser.me/api/portraits/men/2.jpg", width=100)
    #     st.write("**Beckham**\nRol: Desarrollador Full Stack")
    # with col3:
    #     st.image("https://randomuser.me/api/portraits/men/3.jpg", width=100)
    #     st.write("**Ander**\nRol: Analista de Datos")

    st.subheader("Equipo de Desarrollo")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.image("img/dev_equipo.png", width=100)  
        st.write("**√Ångel** üë®‚Äçüíª")

    with col2:
        st.image("img/dev_equipo.png", width=100)
        st.write("**Beckham** üë®‚Äçüíª")

    with col3:
        st.image("img/dev_equipo.png", width=100)
        st.write("**Ander** üìä")



# --- SECCI√ìN 2: An√°lisis de Datos ---

# --- SECCI√ìN 2: Estad√≠sticas B√°sicas ---
elif menu == "üìä An√°lisis de Datos":
    st.title("üìä An√°lisis de Datos: Estad√≠sticas B√°sicas üìà")

    
    # Distribuci√≥n de Vacantes para Personas con Discapacidad
    st.subheader("1. Distribuci√≥n de Vacantes para Personas con Discapacidad")
    st.write("**Descripci√≥n**: Muestra la proporci√≥n de vacantes exclusivas para personas con discapacidad en comparaci√≥n con las que no lo son. La gran mayor√≠a de las vacantes no est√°n destinadas espec√≠ficamente a este grupo.")

    fig_pie = px.pie(df, names='ESPCD', title="Distribuci√≥n de Vacantes para Personas con Discapacidad",
                    color_discrete_sequence=px.colors.sequential.Blues)
    st.plotly_chart(fig_pie)

    # Comparaci√≥n de Vacantes Exclusivas para Personas con Discapacidad
    st.subheader("2. Comparaci√≥n de Vacantes Exclusivas para Personas con Discapacidad")
    st.write("**Descripci√≥n**: Este gr√°fico compara el n√∫mero de vacantes exclusivas para personas con discapacidad (PCD) frente a las que no lo son. La diferencia en altura de las barras revela la cantidad limitada de vacantes espec√≠ficamente dise√±adas para personas con discapacidad en relaci√≥n con las vacantes generales.")

    vacantes_counts = df['ESPCD'].value_counts().reset_index()
    vacantes_counts.columns = ['Vacantes para PCD', 'N√∫mero de Vacantes']
    fig_bar = px.bar(vacantes_counts, x='Vacantes para PCD', y='N√∫mero de Vacantes',
                    title="Comparaci√≥n de Vacantes Exclusivas para Personas con Discapacidad",
                    color='N√∫mero de Vacantes', color_continuous_scale=px.colors.sequential.Pinkyl)
    st.plotly_chart(fig_bar)
    
    # Distribuci√≥n de Vacantes por Sector
    st.subheader("3. Distribuci√≥n de Vacantes por Sector")
    st.write("**Descripci√≥n**: Este gr√°fico muestra los sectores econ√≥micos con mayor cantidad de vacantes. Los sectores est√°n organizados de mayor a menor seg√∫n el n√∫mero de vacantes, permitiendo identificar r√°pidamente en qu√© √°reas hay m√°s oportunidades laborales.")

    sector_counts = df['SECTOR'].value_counts().reset_index()
    sector_counts.columns = ['Sector', 'Number of Vacancies']
    fig1 = px.bar(
        sector_counts,
        x='Sector',
        y='Number of Vacancies',
        color='Number of Vacancies',
        color_continuous_scale='Blues',
        labels={'Sector': 'Sector', 'Number of Vacancies': 'N√∫mero de Vacantes'},
        title="Vacantes por Sector"
    )
    st.plotly_chart(fig1)


    # Distribuci√≥n de Vacantes por Provincia
    st.subheader("4. Distribuci√≥n de Vacantes por Provincia")
    st.write("**Descripci√≥n**: Este gr√°fico ilustra el n√∫mero de vacantes disponibles en distintas provincias. Lima destaca significativamente sobre las dem√°s, indicando una concentraci√≥n de oportunidades laborales en la capital.")

    provincia_counts = df['PROVINCIA'].value_counts().reset_index()
    provincia_counts.columns = ['Provincia', 'Number of Vacancies']
    fig2 = px.bar(
        provincia_counts,
        x='Provincia',
        y='Number of Vacancies',
        color='Number of Vacancies',
        color_continuous_scale='OrRd',
        labels={'Provincia': 'Provincia', 'Number of Vacancies': 'N√∫mero de Vacantes'},
        title="Vacantes por Provincia"
    )
    st.plotly_chart(fig2)

    st.subheader("5. Requisitos de Experiencia en Vacantes")
    st.write("**Descripci√≥n**: Representa la proporci√≥n de vacantes que exigen experiencia previa. M√°s de la mitad de las vacantes requieren experiencia, lo cual podr√≠a ser una barrera para personas con discapacidad en b√∫squeda de empleo ")
    experience_counts = df['SINEXPERIENCIA'].value_counts().reset_index()
    experience_counts.columns = ['Experiencia', 'N√∫mero de Vacantes']
    fig3 = px.pie(
        experience_counts,
        names='Experiencia',
        values='N√∫mero de Vacantes',
        title="Vacantes con o sin Requisitos de Experiencia",
        color_discrete_sequence=px.colors.sequential.RdBu
    )
    st.plotly_chart(fig3)

    st.subheader("6. Experiencia Promedio por Sector")
    st.write("**Descripci√≥n**: Este gr√°fico muestra la cantidad promedio de meses de experiencia requerida en cada sector. Los sectores con barras m√°s largas requieren m√°s experiencia, mientras que otros presentan menores exigencias, lo cual puede ser m√°s accesible para candidatos con menor experiencia. ")
    avg_experience = df.groupby('SECTOR')['EXPERIENCIA_MESES'].mean().reset_index()
    avg_experience.columns = ['Sector', 'Experiencia Promedio (meses)']
    fig4 = px.bar(
        avg_experience,
        x='Sector',
        y='Experiencia Promedio (meses)',
        color='Experiencia Promedio (meses)',
        color_continuous_scale='Viridis',
        title="Experiencia Promedio Requerida por Sector"
    )
    st.plotly_chart(fig4)

# --- SECCI√ìN 3: Predicciones ML ---
elif menu == "ü§ñ Predicciones ML":
    st.title("ü§ñ Predicciones y Clasificaci√≥n de Vacantes Inclusivas")

    # Explicaci√≥n adicional para el usuario
    st.write(
        """
        ### ¬øC√≥mo Funciona el Modelo?
        Este modelo de Machine Learning usa variables como la experiencia y el sector para predecir si una vacante es inclusiva.
        Puedes ajustar los valores en los controles para ver c√≥mo afectan la predicci√≥n.
        
        ### Explicaci√≥n de la Predicci√≥n
        - **Experiencia en meses**: Mayor experiencia puede influir en la inclusi√≥n, dependiendo del sector.
        - **Sector**: Algunos sectores tienen m√°s vacantes inclusivas en comparaci√≥n con otros.
        """
    )
    
    # Modelo de Machine Learning
    df_ml = df.copy()
    df_ml['ESPCD'] = df_ml['ESPCD'].apply(lambda x: 1 if x == "SI" else 0)
    encoder = LabelEncoder()
    df_ml['SECTOR'] = encoder.fit_transform(df_ml['SECTOR'])
    X = df_ml[['EXPERIENCIA_MESES', 'SECTOR']].fillna(0)
    y = df_ml['ESPCD']

    # Entrenamiento del modelo
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestClassifier()
    model.fit(X_train, y_train)
    
    # Resultados del modelo
    st.write("### Resultados del Modelo")
    st.text(classification_report(y_test, model.predict(X_test)))

    # Matriz de Confusi√≥n
    st.write("### Matriz de Confusi√≥n del Modelo")
    y_pred = model.predict(X_test)
    cm = confusion_matrix(y_test, y_pred)
    fig_cm = go.Figure(data=go.Heatmap(
        z=cm,
        x=["No Inclusiva", "Inclusiva"],
        y=["No Inclusiva", "Inclusiva"],
        colorscale="Blues",
        text=cm,
        texttemplate="%{text}"
    ))
    fig_cm.update_layout(title="Matriz de Confusi√≥n", xaxis_title="Predicci√≥n", yaxis_title="Actual")
    st.plotly_chart(fig_cm)

    # Interacci√≥n para predicci√≥n
    st.write("### Predicci√≥n Interactiva")
    st.write("Ingresa la cantidad de experiencia en meses y el sector para predecir si una vacante es inclusiva.")
    exp_input = st.slider("Experiencia (en meses)", 0, 60, 10)
    sector_input = st.selectbox("Selecciona el Sector", df['SECTOR'].unique())
    sector_encoded = encoder.transform([sector_input])[0]

        # Explicaci√≥n adicional para el usuario
    st.write(
        """
        ### Prueba el Modelo
        Modifica los controles para experimentar y entender c√≥mo cambia la predicci√≥n de inclusi√≥n.
        """
    )

    # Realizar predicci√≥n
    prediction = model.predict([[exp_input, sector_encoded]])
    st.write("La vacante es inclusiva üëç" if prediction[0] == 1 else "La vacante no es inclusiva üëé")


